!function e(i,n,o){function r(l,a){if(!n[l]){if(!i[l]){var f="function"==typeof require&&require;if(!a&&f)return f(l,!0);if(t)return t(l,!0);throw new Error("Cannot find module '"+l+"'")}var s=n[l]={exports:{}};i[l][0].call(s.exports,function(e){var n=i[l][1][e];return r(n?n:e)},s,s.exports,e,i,n,o)}return n[l].exports}for(var t="function"==typeof require&&require,l=0;l<o.length;l++)r(o[l]);return r}({1:[function(e){var i=e("./lib/fileupload.js"),n=function(){{var e=$(this),n=e.find(".js_fileupload"),o=n.find(".js_dropbox"),r=n.find(".js_previewList"),t=n.find(".js_fileinput"),l={dropBox:o,filePreview:{el:r,thumbnailSize:150}};new i($,t,"/",l)}};$(document).ready(n)},{"./lib/fileupload.js":4}],2:[function(e,i){var n=function(e,i){console.log("bier bier bier"),e.on("drop",function(e){e.stopPropagation(),e.preventDefault();var n=e.originalEvent.dataTransfer.files;i(n)}),e.on("dragenter",function(e){e.preventDefault()}),e.on("dragleave",function(e){e.preventDefault()}),e.on("dragover",function(e){e.preventDefault()})};i.exports=n},{}],3:[function(e,i){var n=function(e,i){this.previewFile=function(n){if(i.tests.filereader===!0&&i.acceptedTypes[n.type]===!0){var o=new FileReader;o.onload=function(n){var o=new Image;o.src=n.target.result,o.width=i.filePreview.thumbnailSize,e.append(o)},o.readAsDataURL(n)}else $previewlist.innerHTML+="<p>Uploaded "+n.name+" "+(n.size?(n.size/1024|0)+"K":""),console.log(n)}};i.exports=n},{}],4:[function(e,i){var n=e("./dropbox.js"),o=e("./filepreview.js"),r=(e("./progress.js"),function(e,i,r,t){var l=this,a={},f=[],s={tests:{filereader:"undefined"!=typeof FileReader,file:"undefined"!=typeof File,fileList:"undefined"!=typeof Filelist,blob:"undefined"!=typeof Blob,dnd:"draggable"in document.createElement("span"),formdata:!!window.FormData},fileSizeLimit:3e3,fileNumberLimit:3,dropBox:null,list:null,filePreview:{el:null,thumbnailSize:50},progess:!1,errormessages:{FileSizeLimit:"We allow Files with a max. filesize of 3 MB.",fileNumberLimit:"The allowed number of fileuploads is 3."},acceptedTypes:{"image/png":!0,"image/jpeg":!0,"image/gif":!0}},p=function(){for(var n in s)s.hasOwnProperty(n)&&(a[n]=t&&"undefined"!=typeof t[n]?t[n]:s[n],"function"==typeof a[n]&&(a[n]=a[n].bind(l)));a.dropBox&&(l.dropbox=c()),a.filePreview&&(l.filePreview=v()),a.progress&&(l.progress=progress()),i.on("change",function(){var i=e(this).prop("files");l.uploadFiles(i)})},u=function(e){return Math.floor(e/1e3)},d=function(i){var n=e('<li class="file"></li>');n.html('<span class="name">'+i.name+' </span><span class="type">'+i.type+' </span><span class="size">'+u(i.size)+" KB</span> "),a.list.append(n)},c=function(){return a.tests.dnd&&n?new n(a.dropBox,l.uploadFiles):void 0},v=function(){return a.filePreview&&a.tests.filereader?new o(a.filePreview.el,a):void 0},g=function(i){var n=e.ajax({url:r,type:"POST",cache:!1,contentType:"multipart/form-data",processData:!1,data:i});return n},m=function(e){a.filePreview?l.filePreview.previewFile(e):d(e)},w=function(e){console.log("fileUploadFailed"),console.log(e)},h=function(e,i){e.done(function(){m(i)}),e.fail(function(){w(i)})};this.uploadFiles=function(e){for(var i=0;i<e.length;i++){var n=e[i];f.push(n);var o=g(n);h(o,n)}},p()});i.exports=r},{"./dropbox.js":2,"./filepreview.js":3,"./progress.js":5}],5:[function(e,i){var n=function(){this.onProgress=function(e){console.log(e.lengthComputable?"Loaded "+parseInt(e.loaded/e.total*100,10)+"%":"Length not computable.")}};i.exports=n},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,