!function e(i,n,r){function o(l,a){if(!n[l]){if(!i[l]){var f="function"==typeof require&&require;if(!a&&f)return f(l,!0);if(t)return t(l,!0);throw new Error("Cannot find module '"+l+"'")}var s=n[l]={exports:{}};i[l][0].call(s.exports,function(e){var n=i[l][1][e];return o(n?n:e)},s,s.exports,e,i,n,r)}return n[l].exports}for(var t="function"==typeof require&&require,l=0;l<r.length;l++)o(r[l]);return o}({1:[function(e){var i=e("./lib/fileupload.js"),n=function(){var e=this,n=e.querySelector(".js_fileupload"),r=n.querySelector(".js_fileinput"),o=(n.querySelector(".js_dropbox"),e.querySelector(".js_list"),{dropBox:!1}),n=new i(r,"/",o)};$(document).ready(n)},{"./lib/fileupload.js":4}],2:[function(e,i){var n=function(e,i){e.on("drop",function(e){e.stopPropagation(),e.preventDefault();var n=e.originalEvent.dataTransfer.files;i(n)}),e.on("dragenter",function(e){e.preventDefault()}),e.on("dragleave",function(e){e.preventDefault()}),e.on("dragover",function(e){e.preventDefault()})};i.exports=n},{}],3:[function(e,i){var n=function(e,i){this.previewFile=function(n){if(i.tests.filereader===!0&&i.acceptedTypes[n.type]===!0){var r=new FileReader;r.onload=function(n){var r=new Image;r.src=n.target.result,r.width=i.filePreview.thumbnailSize,e.append(r)},r.readAsDataURL(n)}else $previewlist.innerHTML+="<p>Uploaded "+n.name+" "+(n.size?(n.size/1024|0)+"K":""),console.log(n)}};i.exports=n},{}],4:[function(e,i){var n=e("./dropbox.js"),r=e("./filepreview.js"),o=function(e,i,o){var t=this,l={},a={tests:{filereader:"undefined"!=typeof FileReader,file:"undefined"!=typeof File,fileList:"undefined"!=typeof Filelist,blob:"undefined"!=typeof Blob,dnd:"draggable"in document.createElement("span"),formdata:!!window.FormData},fileSizeLimit:3e3,fileNumberLimit:3,dropBox:null,list:null,filePreview:{el:null,thumbnailSize:50},progess:!1,errormessages:{FileSizeLimit:"We allow Files with a max. filesize of 3 MB.",fileNumberLimit:"The allowed number of fileuploads is 3."},acceptedTypes:{"image/png":!0,"image/jpeg":!0,"image/gif":!0}},f=function(){for(var e in a)a.hasOwnProperty(e)&&(l[e]=o&&"undefined"!=typeof o[e]?o[e]:a[e],"function"==typeof l[e]&&(l[e]=l[e].bind(t)));l.dropBox&&(t.dropbox=p()),l.filePreview&&(t.filePreview=d()),console.log(l)},s=function(e){return Math.floor(e/1e3)},u=function(e){var i=$('<li class="file"></li>');i.html('<span class="name">'+e.name+' </span><span class="type">'+e.type+' </span><span class="size">'+s(e.size)+" KB</span> "),l.list.append(i)},p=function(){return l.tests.dnd&&n?new n(l.dropBox,t.uploadFiles):void 0},d=function(){return l.filePreview&&l.tests.filereader?new r(l.filePreview.el,l):void 0},c=function(e){xhr=new XMLHttpRequest;for(var i=0;i<e.length;i++){var n=e[i];n.xhr=xhr}},v=function(e){l.filePreview?t.filePreview.previewFile(e):u(e)},w=function(e){console.log("fileUploadFailed"),console.log(e)},m=function(e,i){e.done(function(){v(i)}),e.fail(function(){w(i)})};this.uploadFiles=function(e){var i=c(e);m(i,file)},f()};i.exports=o},{"./dropbox.js":2,"./filepreview.js":3}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,